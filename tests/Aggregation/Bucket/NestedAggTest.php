<?php
declare(strict_types=1);

namespace Php\Aggregation\Bucket;

use Php\TestBase;

final class NestedAggTest extends TestBase
{
    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->createMapping([
            'user' => ['type' => 'keyword'],
            'posts' => [
                'type' => 'nested',
                'properties' => [
                    'title' => ['type' => 'text'],
                    'views' => ['type' => 'integer'],
                ],
            ],
        ]);
        $this->addDocs([
            [
                'user' => 'Mike',
                'posts' => [
                    ['title' => 'My name is Mike', 'views' => 10],
                    ['title' => 'Today is happy.', 'views' => 20],
                    ['title' => 'I will move to a foreign', 'views' => 30],
                ],
            ],
            [
                'user' => 'Jane',
                'posts' => [
                    ['title' => 'My name is Jane', 'views' => 3],
                    ['title' => 'Today is sad.', 'views' => 6],
                ],
            ],
        ]);
    }

    public function testMinValueInAllDoc()
    {
        $aggQuery['min_views']['min']['field'] = 'posts.views';
        $query = $this->buildQuery($aggQuery);

        $result = $this->type->search($query);
        $postAgg = $result->getAggregation('posts');
        $this->assertCountDocs(2, $result);
        $this->assertEquals(5, $postAgg['doc_count']);
        $this->assertEquals(3, $postAgg['min_views']['value']);
    }

    public function testMinValueInHitDocs()
    {
        $aggQuery['min_views']['min']['field'] = 'posts.views';
        $query = $this->buildQuery($aggQuery);
        $query['query']['match']['user'] = 'Mike';

        $result = $this->type->search($query);
        $postAgg = $result->getAggregation('posts');
        $this->assertCountDocs(1, $result);
        $this->assertEquals(3, $postAgg['doc_count']);
        $this->assertEquals(10, $postAgg['min_views']['value']);
    }

    public function testSumViewsEachUser()
    {
        $postAggQuery = $this->buildQuery([
            'total_views' => [
                'sum' => ['field' => 'posts.views'],
            ],
        ])['aggs'];

        $query['aggs']['users'] = [
            'terms' => [
                'field' => 'user',
            ],
            'aggs' => $postAggQuery,
        ];

        $result = $this->type->search($query);
        $posts = $result->getAggregation('users')['buckets'];
        $this->assertSame([
            'key' => 'Jane',
            'doc_count' => 1,
            'posts' => [
                'doc_count' => 2, // hitしたdocsであなく、postsの要素数。
                'total_views' => ['value' => 9.0],
            ],
        ], $posts[0]);
        $this->assertSame([
            'key' => 'Mike',
            'doc_count' => 1,
            'posts' => [
                'doc_count' => 3,
                'total_views' => ['value' => 60.0],
            ],
        ], $posts[1]);
    }

    private function buildQuery($aggsQuery): array
    {
        $query['aggs']['posts'] = [
            'nested' => ['path' => 'posts'],
            'aggs' => $aggsQuery,
        ];
        return $query;
    }

}